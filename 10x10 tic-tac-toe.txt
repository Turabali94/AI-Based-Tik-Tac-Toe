import random


def drawBoard(board):
    print('+---------------------------------------+')
    print('| ' + board[91] + ' |' + ' ' + board[92] + ' | ' + ' ' + board[93] + '| ' + board[94] + ' | ' + board[95] + ' | ' + board[96] + ' | ' + board[97] + ' | ' + board[98] + ' | ' + board[99] + ' | ' + board[100] + ' |')
    print('|---------------------------------------|')
    print('| ' + board[81] + ' |' + ' ' + board[82] + ' | ' + ' ' + board[83] + '| ' + board[84] + ' | ' + board[85] + ' | ' + board[86] + ' | ' + board[87] + ' | ' + board[88] + ' | ' + board[89] + ' | ' + board[90] + ' |')
    print('|---------------------------------------|')
    print('| ' + board[71] + ' |' + ' ' + board[72] + ' | ' + ' ' + board[73] + '| ' + board[74] + ' | ' + board[75] + ' | ' + board[76] + ' | ' + board[77] + ' | ' + board[78] + ' | ' + board[79] + ' | ' + board[80] + ' |')
    print('|---------------------------------------|')
    print('| ' + board[61] + ' |' + ' ' + board[62] + ' | ' + ' ' + board[63] + '| ' + board[64] + ' | ' + board[65] + ' | ' + board[66] + ' | ' + board[67] + ' | ' + board[68] + ' | ' + board[69] + ' | ' + board[70] + ' |')
    print('|---------------------------------------|')
    print('| ' + board[51] + ' |' + ' ' + board[52] + ' | ' + ' ' + board[53] + '| ' + board[54] + ' | ' + board[55] + ' | ' + board[56] + ' | ' + board[57] + ' | ' + board[58] + ' | ' + board[59] + ' | ' + board[60] + ' |')
    print('|---------------------------------------|')
    print('| ' + board[41] + ' |' + ' ' + board[42] + ' | ' + ' ' + board[43] + '| ' + board[44] + ' | ' + board[45] + ' | ' + board[46] + ' | ' + board[47] + ' | ' + board[48] + ' | ' + board[49] + ' | ' + board[50] + ' |')
    print('|---------------------------------------|')
    print('| ' + board[31] + ' |' + ' ' + board[32] + ' | ' + ' ' + board[33] + '| ' + board[34] + ' | ' + board[35] + ' | ' + board[36] + ' | ' + board[37] + ' | ' + board[38] + ' | ' + board[39] + ' | ' + board[40] + ' |')
    print('|---------------------------------------|')
    print('| ' + board[21] + ' |' + ' ' + board[22] + ' | ' + ' ' + board[23] + '| ' + board[24] + ' | ' + board[25] + ' | ' + board[26] + ' | ' + board[27] + ' | ' + board[28] + ' | ' + board[29] + ' | ' + board[30] + ' |')
    print('|---------------------------------------|')
    print('| ' + board[11] + ' |' + ' ' + board[12] + ' | ' + ' ' + board[13] + '| ' + board[14] + ' | ' + board[15] + ' | ' + board[16] + ' | ' + board[17] + ' | ' + board[18] + ' | ' + board[19] + ' | ' + board[20] + ' |')
    print('|---------------------------------------|')
    print('| ' + board[1] + ' |' + ' ' + board[2] + ' | ' + ' ' + board[3] + '| ' + board[4] + ' | ' + board[5] + ' | ' + board[6] + ' | ' + board[7] + ' | ' + board[8] + ' | ' + board[9] + ' | ' + board[10] + ' |')
    print('+---------------------------------------+')

def inputPlayerLetter():

    letter = ''
    while not (letter == 'X' or letter == 'O'):
        print('Do you want to be X or O?')
        letter = input().upper()
    if letter == 'X':
        return ['X', 'O']
    else:
        return ['O', 'X']


def whoGoesFirst():
    if random.randint(0, 1) == 0:
        return 'computer'
    else:
        return 'player'


def playAgain():

    print('Do you want to play again? (yes or no)')
    return input().lower().startswith('y')


def makeMove(board, letter, move):
    board[move] = letter


def isWinner(bo, le):
    return ((bo[91] == le and bo[92] == le and bo[93] == le and bo[94] == le and bo[95] == le and bo[96] == le and bo[97] == le and bo[98] == le and bo[99] == le and bo[100] == le) or
            (bo[81] == le and bo[82] == le and bo[83] == le and bo[84] == le and bo[85] == le and bo[86] == le and bo[87] == le and bo[88] == le and bo[89] == le and bo[90] == le) or
            (bo[71] == le and bo[72] == le and bo[73] == le and bo[74] == le and bo[75] == le and bo[76] == le and bo[77] == le and bo[78] == le and bo[79] == le and bo[80] == le) or
            (bo[61] == le and bo[62] == le and bo[63] == le and bo[64] == le and bo[65] == le and bo[66] == le and bo[67] == le and bo[68] == le and bo[69] == le and bo[70] == le) or
            (bo[51] == le and bo[52] == le and bo[53] == le and bo[54] == le and bo[55] == le and bo[56] == le and bo[57] == le and bo[58] == le and bo[59] == le and bo[60] == le) or
            (bo[41] == le and bo[42] == le and bo[43] == le and bo[44] == le and bo[45] == le and bo[46] == le and bo[47] == le and bo[48] == le and bo[49] == le and bo[50] == le) or
            (bo[31] == le and bo[32] == le and bo[33] == le and bo[34] == le and bo[35] == le and bo[36] == le and bo[37] == le and bo[38] == le and bo[39] == le and bo[40] == le) or
            (bo[21] == le and bo[22] == le and bo[23] == le and bo[24] == le and bo[25] == le and bo[26] == le and bo[27] == le and bo[28] == le and bo[29] == le and bo[20] == le) or
            (bo[11] == le and bo[12] == le and bo[13] == le and bo[14] == le and bo[15] == le and bo[16] == le and bo[17] == le and bo[18] == le and bo[19] == le and bo[20] == le) or
            (bo[1] == le and bo[2] == le and bo[3] == le and bo[4] == le and bo[5] == le and bo[6] == le and bo[7] == le and bo[8] == le and bo[9] == le and bo[10] == le) or
            (bo[91] == le and bo[81] == le and bo[71] == le and bo[61] == le and bo[51] == le and bo[41] == le and bo[31] == le and bo[21] == le and bo[11] == le and bo[1] == le) or
            (bo[92] == le and bo[82] == le and bo[72] == le and bo[62] == le and bo[52] == le and bo[42] == le and bo[32] == le and bo[22] == le and bo[12] == le and bo[2] == le) or
            (bo[93] == le and bo[83] == le and bo[73] == le and bo[63] == le and bo[53] == le and bo[43] == le and bo[33] == le and bo[23] == le and bo[13] == le and bo[3] == le) or
            (bo[94] == le and bo[84] == le and bo[74] == le and bo[64] == le and bo[54] == le and bo[44] == le and bo[34] == le and bo[24] == le and bo[14] == le and bo[4] == le) or
            (bo[95] == le and bo[85] == le and bo[75] == le and bo[65] == le and bo[55] == le and bo[45] == le and bo[35] == le and bo[25] == le and bo[15] == le and bo[5] == le) or
            (bo[96] == le and bo[86] == le and bo[76] == le and bo[66] == le and bo[56] == le and bo[46] == le and bo[36] == le and bo[26] == le and bo[16] == le and bo[6] == le) or
            (bo[97] == le and bo[87] == le and bo[77] == le and bo[67] == le and bo[57] == le and bo[47] == le and bo[37] == le and bo[27] == le and bo[17] == le and bo[7] == le) or
            (bo[98] == le and bo[88] == le and bo[78] == le and bo[68] == le and bo[58] == le and bo[48] == le and bo[38] == le and bo[28] == le and bo[18] == le and bo[8] == le) or
            (bo[99] == le and bo[89] == le and bo[79] == le and bo[69] == le and bo[59] == le and bo[49] == le and bo[39] == le and bo[29] == le and bo[19] == le and bo[9] == le) or
            (bo[100] == le and bo[90] == le and bo[80] == le and bo[70] == le and bo[60] == le and bo[50] == le and bo[40] == le and bo[30] == le and bo[20] == le and bo[10] == le) or
            (bo[91] == le and bo[82] == le and bo[73] == le and bo[64] == le and bo[55] == le and bo[46] == le and bo[37] == le and bo[28] == le and bo[19] == le and bo[10] == le) or
            (bo[1] == le and bo[12] == le and bo[23] == le and bo[34] == le and bo[45] == le and bo[56] == le and bo[67] == le and bo[78] == le and bo[89] == le and bo[100] == le))


def getBoardCopy(board):
    dupeBoard = []
    for i in board:
        dupeBoard.append(i)
    return dupeBoard


def isSpaceFree(board, move):
    return board[move] == ' '



def getPlayerMove(board):
    move = ' '
    while move not in '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100'.split() or not isSpaceFree(board, int(move)):
        print('Make a move? (1-100)')
        move = input()
    return int(move)




def chooseRandomMoveFromList(board, movesList):

    possibleMoves = []
    for i in movesList:
        if isSpaceFree(board, i):
            possibleMoves.append(i)
    if len(possibleMoves) != 0:
        return random.choice(possibleMoves)
    else:
        return None


def getComputerMove(board, computerLetter):
    if computerLetter == 'X':
        playerLetter = 'O'
    else:
        playerLetter = 'X'
    # Here is our algorithm for our Tic Tac Toe AI:
    # First, check if we can win in the next move
    for i in range(1, 101):
        copy = getBoardCopy(board)
        if isSpaceFree(copy, i):
            makeMove(copy, computerLetter, i)
            if isWinner(copy, computerLetter):
                return i
    # Check if the player could win on his next move, and block them.
    for i in range(1, 101):
        copy = getBoardCopy(board)
        if isSpaceFree(copy, i):
            makeMove(copy, playerLetter, i)
            if isWinner(copy, playerLetter):
                return i

    move = chooseRandomMoveFromList(board, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])
    if move != None:
        return move


def getComputerMoveEasy(board, computerLetter):
    if computerLetter == 'X':
        playerLetter = 'O'
    else:
        playerLetter = 'X'
    move = chooseRandomMoveFromList(board, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                                            24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
                                            45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
                                            66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
                                            87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])
    if move != None:
        return move



def isBoardFull(board):
    for i in range(1, 101):
        if isSpaceFree(board, i):
            return False
    return True

# Main Program By: Syed Zaki Abbas - 12/30/2020 - 04:37 AM

print('Welcome to Tic Tac Toe!')
print('Press 1 for easy mode or 2 for hard mode')
choice = int(input())
if choice == 1:
    while True:
        theBoard = [' '] * 101
        playerLetter, computerLetter = inputPlayerLetter()
        turn = whoGoesFirst()
        print('The ' + turn + ' will go first.')
        gameIsPlaying = True
        while gameIsPlaying:
            if turn == 'player':
                drawBoard(theBoard)
                move = getPlayerMove(theBoard)
                makeMove(theBoard, playerLetter, move)
                if isWinner(theBoard, playerLetter):
                    drawBoard(theBoard)
                    print('Hooray! You have beaten the computer! You win! :)')
                    gameIsPlaying = False
                else:
                    if isBoardFull(theBoard):
                        drawBoard(theBoard)
                        print('The game is a tie!')
                        break
                    else:
                        turn = 'computer'
            else:
                move = getComputerMoveEasy(theBoard, computerLetter)
                makeMove(theBoard, computerLetter, move)

                if isWinner(theBoard, computerLetter):
                    drawBoard(theBoard)
                    print('Opsss! The computer has beaten you! You lose! :(')
                    gameIsPlaying = False

                else:
                    if isBoardFull(theBoard):
                        drawBoard(theBoard)
                        print('The game is a tie!')
                        break
                    else:
                        turn = 'player'
        if not playAgain():
            break

elif choice == 2:
    while True:
        theBoard = [' '] * 200
        playerLetter, computerLetter = inputPlayerLetter()
        turn = whoGoesFirst()
        print('The ' + turn + ' will go first.')
        gameIsPlaying = True
        while gameIsPlaying:
            if turn == 'player':
                drawBoard(theBoard)
                move = getPlayerMove(theBoard)
                makeMove(theBoard, playerLetter, move)
                if isWinner(theBoard, playerLetter):
                    drawBoard(theBoard)
                    print('Hooray! You have beaten the computer! You win! :)')
                    gameIsPlaying = False
                else:
                    if isBoardFull(theBoard):
                        drawBoard(theBoard)
                        print('The game is a tie!')
                        break
                    else:
                        turn = 'computer'
            else:
                move = getComputerMove(theBoard, computerLetter)
                makeMove(theBoard, computerLetter, move)

                if isWinner(theBoard, computerLetter):
                    drawBoard(theBoard)
                    print('The computer has beaten you! You lose! :(')
                    gameIsPlaying = False

                else:
                    if isBoardFull(theBoard):
                        drawBoard(theBoard)
                        print('The game is a tie!')
                        break
                    else:
                        turn = 'player'
        if not playAgain():
            break

else:
    print('You entered invalid option')

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
